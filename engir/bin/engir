#!/bin/bash -e

set -o pipefail

declare opts cmd cmdname
declare version=0.0.1

print-commands () {
  local -a cmds=()
  local cmd

  cmds+=($(declare -F | awk '{print $3}' | grep ^engir-))
  cmds+=($(compgen -c engir-))
  IFS=$'\n' cmds=($(sort -u <<< "${cmds[*]}"))

  for cmd in "${cmds[@]}"; do
    echo ${cmd:6}
  done
}

print-npm-installer () {
cat <<INSTALL
#!/bin/bash -e
set -o pipefail
bundle=\${BASH_SOURCE[0]}
tmp=\$(mktemp -d); trap "rm -rf \$tmp" EXIT
linenum=\$(grep -n ^START_OF_BUNDLE "\$bundle" | head -n1 | sed -e 's/:.*//')
tail -n +\$((linenum+1)) "\$bundle" | base64 -d > \$tmp/package.tgz
npm install -g \$tmp/package.tgz
exit 0
START_OF_BUNDLE
INSTALL
}

print-tarball-installer () {
cat <<INSTALL
#!/bin/bash -e
set -o pipefail
bundle=\${BASH_SOURCE[0]}
tmp=\$(mktemp -d); trap "rm -rf \$tmp" EXIT
linenum=\$(grep -n ^START_OF_BUNDLE "\$bundle" | head -n1 | sed -e 's/:.*//')
tail -n +\$((linenum+1)) "\$bundle" | base64 -d > \$tmp/package.tgz
tar xzvf \$tmp/package.tgz -C /usr/local --no-same-owner --no-same-permissions
tar tzf \$tmp/package.tgz | grep -q ^man/ && which mandb &>/dev/null && mandb || true
exit 0
START_OF_BUNDLE
INSTALL
}

print-usage () {
  echo "Usage: engir [-C <path>] [--quiet] <command> [<args>]"
  echo
  echo "Commands recognized by engir:"

  print-commands | sed -e s/^/'  '/
}

print-usage-npm () {
  echo "Usage: engir npm [-O <output>] <tarball>"
}

print-usage-tarball () {
  echo "Usage: engir tarball [-O <output>] <tarball>"
}

print-version () {
  if test "$version" = development; then
    echo -n engir v
    cat $(cd $(dirname "${BASH_SOURCE}")/..; pwd)/version
  else
    echo engir v$version
  fi
}

engir () {
  opts=$(POSIXLY_CORRECT=1 getopt \
    -oC:qv -lcd:,help,quiet,verbose,version \
    -- "$@")
  eval set -- "$opts"

  if ! test -t 6; then
    exec 6>/dev/null
  fi

  while true; do
    case "$1" in
      --help)       print-usage >&5;    exit;;
      -C|--cd)      cd "$2";            shift 2;;
      -q|--quiet)   exec 6>/dev/null;   shift;;
      -v|--verbose) exec 6>&4;          shift;;
      --version)    print-version >&5;  exit;;
      --)                               shift; break;;
      *)                                break;;
    esac
  done

  # set default command name if one isn't provided
  if test $# -eq 0; then
    set -- commands
  fi

  cmdname=$1; shift
  cmd=engir-$cmdname

  if test function = "$(type -t $cmd)" || which "$cmd" &>/dev/null; then
    "$cmd" "$@"
  else
    echo "engir: '$cmdname' is not an engir command" >&2
    exit 11
  fi
}

engir-commands () {
  local cmd

  echo "Commands recognized by engir:" >&6

  for cmd in $(print-commands); do
    echo -n "  " >&6
    echo $cmd >&5
  done
}

engir-npm () {
  local opts
  local output
  local name
  local version

  opts=$(POSIXLY_CORRECT=1 getopt \
    -oC:O:qv -lcd:,help,output:,quiet,verbose \
    -- "$@")
  eval set -- "$opts"

  while true; do
    case "$1" in
      --help)       print-usage-npm >&5;  exit;;
      -C|--cd)      cd "$2";              shift 2;;
      -O|--output)  output="$2";          shift 2;;
      -q|--quiet)   exec 6>/dev/null;     shift;;
      -v|--verbose) exec 6>&4;            shift;;
      --)                                 shift; break;;
      *)                                  break;;
    esac
  done

  if test $# -eq 0; then
    echo "error: missing tarball argument" >&2
    exit 1
  elif test $# -gt 1; then
    echo "error: unexpected argument -- $2" >&2
    exit 2
  elif ! test -e "$1"; then
    echo "error: tarball does not exist -- $1" >&2
    exit 11
  fi

  if test "$output" = -; then
    exec 3>&4
  else
    if ! test "$output"; then
      name=$(tar xzf "$1" -O package/package.json | jq -r .name)
      version=$(tar xzf "$1" -O package/package.json | jq -r .version)
      output="$(pwd)"/install-$name-$version
    fi

    touch "$output"
    chmod +x "$output"
    exec 3>"$output"
  fi

  print-npm-installer >&3
  base64 "$1" >&3
  exec 3>&-
  
  if test "$output" != -; then
    echo -n "wrote bundle to: " >&6
    echo "$output" >&4
  fi
}

engir-tarball () {
  local opts
  local output
  local name

  opts=$(POSIXLY_CORRECT=1 getopt \
    -oC:O:qv -lcd:,help,output:,quiet,verbose \
    -- "$@")
  eval set -- "$opts"

  while true; do
    case "$1" in
      --help)       print-usage-tarball >&5;  exit;;
      -C|--cd)      cd "$2";                  shift 2;;
      -O|--output)  output="$2";              shift 2;;
      -q|--quiet)   exec 6>/dev/null;         shift;;
      -v|--verbose) exec 6>&4;                shift;;
      --)                                     shift; break;;
      *)                                      break;;
    esac
  done

  if test $# -eq 0; then
    echo "error: missing tarball argument" >&2
    exit 1
  elif test $# -gt 1; then
    echo "error: unexpected argument -- $2" >&2
    exit 2
  elif ! test -e "$1"; then
    echo "error: tarball does not exist -- $1" >&2
    exit 11
  fi

  if test "$output" = -; then
    exec 3>&4
  else
    if ! test "$output"; then
      name=$(basename "$1" .tgz)
      output="$(pwd)"/install-$name
    fi

    touch "$output"
    chmod +x "$output"
    exec 3>"$output"
  fi

  print-tarball-installer >&3
  base64 "$1" >&3
  exec 3>&-
  
  if test "$output" != -; then
    echo -n "wrote bundle to: " >&6
    echo "$output" >&4
  fi
}

engir-version () {
  print-version >&5
}

# streams
# 1 - null
# 2 - stderr
# 3 - reserved for commands
# 4 - stdout
# 5 - data; stdout/null
# 6 - format; stdout/null
exec 4>&1 5>&1 6>&1 1>/dev/null
engir "$@"
